# -*- coding: utf-8 -*-
"""project-7 Car_price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gZnttz0RvzkWAIaJMy_ms4q0haxAS0G7
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data collection and pre processing:

"""

#uploading data
data=pd.read_csv('/content/CAR DETAILS FROM CAR DEKHO.csv')

data.head()

data.shape

#various features of data set:
data.describe()

#checking missing value in our datasettt
data.isnull().sum()

#checing value counts of each columns or feature:
print(data.fuel.value_counts())
print(data.seller_type.value_counts())
print(data.transmission.value_counts())
print(data.owner.value_counts())

"""LabelEncoding:

"""

#encoding fuel:
data.replace({'fuel':{'Petrol':0,'Diesel':1,'CNG':2,'LPG':3,'Electric':4}},inplace=True)
data.replace({'seller_type':{'Individual':0,'Dealer':1,'Trustmark Dealer':2}},inplace=True)
data.replace({'owner':{'First Owner':0,'Second Owner':1,'Third Owner':2,'Fourth & Above Owner':3,'Test Drive Car':4}},inplace=True)
data.replace({'transmission':{'Manual':0,'Automatic':1}},inplace=True)

data.head()

data.tail()

""" spliting:data and target

"""

x=data.drop(['name','selling_price'],axis=1)

y=data['selling_price']

print(x,y)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)

"""Model training:
1>linear regresion

"""

lin_model=LinearRegression()

lin_model.fit(x_train,y_train)

#evaluation:
#predition on traing data
train_predict=lin_model.predict(x_train)

#R square error:
error_score=metrics.r2_score(y_train,train_predict)
print(error_score)

lin_model.fit(x_test,y_test)
test_predict=lin_model.predict(x_test)
#R square error:
error_score1=metrics.r2_score(y_test,test_predict)
print(error_score1)

#checking our model for some random value:
new=(2016,52600,1,0,0,0)

numpy=np.asarray(new)
input=numpy.reshape(1,-1)

prediction = lin_model.predict(input)
print("Selling Price prediction is:",prediction)



